<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8">
	<title>Welcome &ndash; Horaro</title>
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link href="/assets/vendor.css" rel="stylesheet">
	<link href="//maxcdn.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css" rel="stylesheet">
	<link href="//cdnjs.cloudflare.com/ajax/libs/x-editable/1.5.1/bootstrap3-editable/css/bootstrap-editable.css" rel="stylesheet">
	<link href="/assets/app.css" rel="stylesheet">
</head>
<body>
	<nav class="navbar navbar-default navbar-static-top" id="top" role="navigation">
		<div class="container">
			<div class="navbar-header">
				<button class="navbar-toggle" type="button" data-toggle="collapse" data-target=".bs-navbar-collapse">
					<span class="sr-only">Toggle navigation</span>
					<span class="icon-bar"></span>
					<span class="icon-bar"></span>
					<span class="icon-bar"></span>
				</button>
				<a href="/" class="navbar-brand">Horaro</a>
			</div>

			{% block navigation %}
			<div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
				{% if app.user %}
				<ul class="nav navbar-nav">
					<li><a href="/-/home"><i class="fa fa-home"></i> Home</a></li>
					<li class="dropdown">
						<a href="#" class="dropdown-toggle" data-toggle="dropdown"><i class="fa fa-gamepad"></i> My Events <span class="caret"></span></a>
						<ul class="dropdown-menu">
							{% for event in app.user.events %}
							<li><a href="/-/events/{{ event.id }}">{{ event.name }}</a></li>
							{% endfor %}

							{% if app.user.events|length > 0 %}
							<li class="divider"></li>
							{% endif %}
							<li><a href="/-/events/new">New&hellip;</a></li>
						</ul>
					</li>
					<li class="dropdown">
						<a href="#" class="dropdown-toggle" data-toggle="dropdown"><i class="fa fa-users"></i> My Teams <span class="caret"></span></a>
						<ul class="dropdown-menu">
							{% for event in app.user.teams %}
							<li><a href="/-/teams/{{ team.id }}">{{ team.name }}</a></li>
							{% endfor %}

							{% if app.user.teams|length > 0 %}
							<li class="divider"></li>
							{% endif %}
							<li><a href="/-/teams/new">New&hellip;</a></li>
						</ul>
					</li>
				</ul>

				<ul class="nav navbar-nav navbar-right">
					<li><a href="/-/profile"><i class="fa fa-cog"></i> {{ app.user.name }}</a></li>
					<li><a href="/-/logout"><i class="fa fa-power-off"></i> Log-out</a></li>
				</ul>
				{% else %}
				<form method="post" action="/-/login" class="navbar-form navbar-right">
					<div class="form-group">
						<input type="text" name="username" placeholder="username" required>
					</div>
					<div class="form-group">
						<input type="password" name="password" placeholder="password" required>
					</div>
					<div class="form-group">
						<button type="submit" class="btn btn-primary"><i class="fa fa-sign-in"></i> Log-in</button>
					</div>
				</form>
				{% endif %}
			</div>
			{% endblock %}
		</div>
	</nav>

	<div class="container" id="content">
		{% block content %}{% endblock %}
	</div>

	<script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
	<script src="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>
	<script src="//cdnjs.cloudflare.com/ajax/libs/knockout/3.2.0/knockout-min.js"></script>
	<script src="//cdnjs.cloudflare.com/ajax/libs/x-editable/1.5.1/bootstrap3-editable/js/bootstrap-editable.min.js"></script>
	<script src="/assets/js/vendor.backend.js"></script>

	{% verbatim %}
	<script type="text/javascript">
	jQuery(function($) {
		function parseLength(str) {
			var parts = str.split(':');

			// 'HH:MM:SS'
			if (parts.length >= 3) {
				return parts[0] * 3600 + parts[1] * 60 + parseInt(parts[2], 10);
			}

			// 'HH:MM'
			if (parts.length === 2) {
				return parts[0] * 3600 + parts[1] * 60;
			}

			// 'MM'
			if (parts.length === 1) {
				return parts[0] * 60;
			}

			return 0;
		}

		$('#start_date').pickadate({
			formatSubmit: 'yyyy-mm-dd',
			hiddenName: true
		});

		$('#start_time').pickatime({
			interval: 15,
			formatSubmit: 'HH:i',
			hiddenName: true
		});

		$.fn.editable.defaults.mode = 'popup';

		$.fn.editableform.buttons =
			'<button type="submit" class="btn btn-primary btn-xs editable-submit">'+
				'<i class="fa fa-check"></i>'+
			'</button>'+
			'<button type="button" class="btn btn-default btn-xs editable-cancel">'+
				'<i class="fa fa-ban"></i>'+
			'</button>';

		function Item(id, length, columns, pos) {
			var self = this;

			// setup simple data properties

			self.id        = ko.observable(id);
			self.length    = ko.observable(length);
			self.scheduled = ko.observable(); // will be set by calculateSchedule()

			// setup simple properties for the schedule columns

			scheduleColumns.forEach(function(colID) {
				var name  = 'col_' + colID;
				var value = '';

				if (columns.hasOwnProperty(colID)) {
					value = columns[colID];
				}

				self[name] = ko.observable(value);
			});

			// setup properties for managing app state

			self.position  = pos;
			self.firstRun  = true;
			self.suspended = false;
			self.expanded  = ko.observable(false);
			self.busy      = ko.observable(false);
			self.errors    = ko.observable(false);

			// computed properties

			self.formattedLength = ko.pureComputed({
				owner: self,
				read: function() {
					return moment.unix(self.length()).utc().format('HH:mm:ss');
				},
				write: function(value) {
					self.length(parseLength(value));
				}
			});

			self.formattedSchedule = ko.pureComputed(function() {
				return moment(self.scheduled()).locale('de').format('LT');
			}, self);

			// subscribers

			self.length.subscribe(function(newValue) {
				self.sync({length: newValue});
				viewModel.calculateSchedule(0);
			});

			scheduleColumns.forEach(function(colID) {
				var name = 'col_' + colID;

				self[name].subscribe(function(newValue) {
					var columns = {};
					columns[colID] = newValue;

					self.sync({columns: columns});
				});
			});

			self.sync = function(patch) {
				if (self.suspended) {
					return;
				}

				var itemID = self.id();
				var isNew  = itemID === -1;
				var method = 'POST';
				var url    = '';

				if (isNew) {
					url = '/-/schedules/' + scheduleID + '/items';

					// When creating an element, send all non-empty fields instead of just the one that
					// has been changed (i.e. the one in patch); this makes sure the length gets sent
					// along when someone edits a content column first (without the length, the request
					// would always fail, because items with length=0 are not allowed).
					patch = {
						length: self.length(),
						columns: {}
					};

					scheduleColumns.forEach(function(colID) {
						var key   = 'col_' + colID;
						var value = self[key]();

						patch.columns[colID] = value;
					});
				}
				else {
					url = '/-/schedules/' + scheduleID + '/items/' + itemID + '?_method=PATCH';
				}

				self.busy(true);

				$.ajax({
					type: method,
					url: url,
					dataType: 'json',
					contentType: 'application/json',
					data: JSON.stringify(patch),
					success: function(result) {
						self.suspended = true;

						self.id(result.data.id);
						self.length(result.data.length);
						self.errors(false);

						horaro.schedule.columns.forEach(function(id) {
							var key   = 'col_' + id;
							var value = id in result.data.columns ? result.data.columns[id] : '';

							self[key](value);
						});

						if (isNew) {
							viewModel.initDragAndDrop(true);
						}

						self.suspended = false;
					},
					error: function(result, data) {
						self.errors(result.responseJSON.errors);
					},
					complete: function() {
						self.busy(false);
					}
				});
			};

			// behaviours

			self.toggle = function() {
				self.expanded(!self.expanded());
			};
		}

		function ItemsViewModel(items) {
			var self = this;

			self.items = ko.observableArray(items);

			self.hasNewItem = ko.pureComputed(function() {
				return self.items().filter(function(item) {
					return item.id() === -1;
				}).length > 0;
			}, self);

			self.calculateSchedule = function(startIdx) {
				var start, i, len, items, item, scheduled;

				startIdx = startIdx || 0;
				items    = self.items();

				if (startIdx === 0) {
					start = horaro.schedule.start.getTime();
				}
				else {
					start = items[startIdx].scheduled.getTime() + (items[startIdx].length() * 1000);
				}

				scheduled = start;

				for (i = startIdx, len = items.length; i < len; ++i) {
					item = items[i];

					item.scheduled(new Date(scheduled));

					scheduled += (item.length() * 1000);
				}
			};

			self.add = function() {
				var data = {};

				horaro.schedule.columns.forEach(function(id) {
					data[id] = '';
				});

				self.items.push(new Item(-1, 30*60, data));
			};

			self.move = function(itemID, newPos) {
				var items = self.items;
				var item  = self.findItem(itemID);

				item.busy(true);

				$.ajax({
					type: 'POST',
					url: '/-/schedules/' + scheduleID + '/items/move',
					dataType: 'json',
					contentType: 'application/json',
					data: JSON.stringify({ item: itemID, position: newPos }),
					complete: function() {
						item.busy(false);
					}
				});

				// escape to floats for simple re-sorting goodness
				item.position = (newPos < item.position) ? (newPos - 0.5) : (newPos + 0.5);

				items.sort(function(a, b) {
					return a.position - b.position;
				});

				// re-number the list
				items().forEach(function(item, idx) {
					item.position = idx + 1;
				});
			};

			self.findItem = function(itemID) {
				var items = self.items(), len = items.length, i = 0;

				for (; i < len; ++i) {
					if (items[i].id() === itemID) {
						return items[i];
					}
				}

				return null;
			};

			self.initDragAndDrop = function(reinit) {
				$('.h-scheduler').sortable({
					handle: '.h-handle',
					items: '.h-item',
					forcePlaceholderSize: true
				});

				if (!reinit) {
					$('.h-scheduler').on('sortupdate', function(event, stuff) {
						var row    = stuff.item;
						var newPos = row.index();    // 1-based
						var itemID = row.data('itemid');

						self.move(itemID, newPos);
					});
				}
			};

			ko.computed(function() {
				self.calculateSchedule();
			});
		}

		var scheduleColumns = horaro.schedule.columns;
		var scheduleID      = horaro.schedule.id;
		var items           = [];

		if (horaro.schedule.items) {
			horaro.schedule.items.forEach(function(item, idx) {
				items.push(new Item(item[0], item[1], item[2], idx + 1));
			});
		}

		var viewModel = new ItemsViewModel(items);
		ko.applyBindings(viewModel);
		viewModel.initDragAndDrop(false);
	});
	</script>
	{% endverbatim %}
</body>
